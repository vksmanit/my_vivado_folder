// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix_mul_HH_
#define _matrix_mul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrix_mul_dadd_64ns_64ns_64_5_full_dsp.h"
#include "matrix_mul_dmul_64ns_64ns_64_6_max_dsp.h"

namespace ap_rtl {

struct matrix_mul : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<64> > a_q0;
    sc_out< sc_lv<2> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<64> > b_q0;
    sc_out< sc_lv<2> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<64> > out_r_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    matrix_mul(sc_module_name name);
    SC_HAS_PROCESS(matrix_mul);

    ~matrix_mul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrix_mul_dadd_64ns_64ns_64_5_full_dsp<1,5,64,64,64>* matrix_mul_dadd_64ns_64ns_64_5_full_dsp_U1;
    matrix_mul_dmul_64ns_64ns_64_6_max_dsp<1,6,64,64,64>* matrix_mul_dmul_64ns_64ns_64_6_max_dsp_U2;
    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_31;
    sc_signal< sc_lv<2> > i0_1_fu_123_p2;
    sc_signal< sc_lv<2> > i0_1_reg_200;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_64;
    sc_signal< sc_lv<2> > i1_1_fu_135_p2;
    sc_signal< sc_lv<2> > i1_1_reg_208;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_73;
    sc_signal< sc_lv<2> > tmp_fu_141_p2;
    sc_signal< sc_lv<2> > tmp_reg_213;
    sc_signal< sc_lv<1> > exitcond1_fu_129_p2;
    sc_signal< sc_lv<2> > out_addr_reg_218;
    sc_signal< sc_lv<2> > i2_1_fu_164_p2;
    sc_signal< sc_lv<2> > i2_1_reg_226;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_90;
    sc_signal< sc_lv<1> > exitcond_fu_158_p2;
    sc_signal< sc_lv<64> > a_load_reg_241;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_105;
    sc_signal< sc_lv<64> > b_load_reg_246;
    sc_signal< sc_lv<64> > grp_fu_113_p2;
    sc_signal< sc_lv<64> > tmp_s_reg_251;
    sc_signal< sc_logic > ap_sig_cseq_ST_st11_fsm_10;
    sc_signal< bool > ap_sig_115;
    sc_signal< sc_lv<64> > grp_fu_108_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st16_fsm_15;
    sc_signal< bool > ap_sig_124;
    sc_signal< sc_lv<2> > i0_reg_61;
    sc_signal< sc_lv<2> > i1_reg_73;
    sc_signal< sc_lv<1> > exitcond2_fu_117_p2;
    sc_signal< sc_lv<64> > storemerge_reg_84;
    sc_signal< sc_lv<2> > i2_reg_97;
    sc_signal< sc_lv<64> > tmp_2_fu_153_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_182_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_192_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st12_fsm_11;
    sc_signal< bool > ap_sig_157;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_166;
    sc_signal< sc_lv<2> > tmp_1_fu_147_p2;
    sc_signal< sc_lv<2> > tmp_3_fu_170_p2;
    sc_signal< sc_lv<2> > tmp_6_fu_176_p2;
    sc_signal< sc_lv<2> > tmp_8_fu_187_p2;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_st1_fsm_0;
    static const sc_lv<16> ap_ST_st2_fsm_1;
    static const sc_lv<16> ap_ST_st3_fsm_2;
    static const sc_lv<16> ap_ST_st4_fsm_3;
    static const sc_lv<16> ap_ST_st5_fsm_4;
    static const sc_lv<16> ap_ST_st6_fsm_5;
    static const sc_lv<16> ap_ST_st7_fsm_6;
    static const sc_lv<16> ap_ST_st8_fsm_7;
    static const sc_lv<16> ap_ST_st9_fsm_8;
    static const sc_lv<16> ap_ST_st10_fsm_9;
    static const sc_lv<16> ap_ST_st11_fsm_10;
    static const sc_lv<16> ap_ST_st12_fsm_11;
    static const sc_lv<16> ap_ST_st13_fsm_12;
    static const sc_lv<16> ap_ST_st14_fsm_13;
    static const sc_lv<16> ap_ST_st15_fsm_14;
    static const sc_lv<16> ap_ST_st16_fsm_15;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_105();
    void thread_ap_sig_115();
    void thread_ap_sig_124();
    void thread_ap_sig_157();
    void thread_ap_sig_166();
    void thread_ap_sig_31();
    void thread_ap_sig_64();
    void thread_ap_sig_73();
    void thread_ap_sig_90();
    void thread_ap_sig_cseq_ST_st11_fsm_10();
    void thread_ap_sig_cseq_ST_st12_fsm_11();
    void thread_ap_sig_cseq_ST_st16_fsm_15();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_exitcond1_fu_129_p2();
    void thread_exitcond2_fu_117_p2();
    void thread_exitcond_fu_158_p2();
    void thread_i0_1_fu_123_p2();
    void thread_i1_1_fu_135_p2();
    void thread_i2_1_fu_164_p2();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_tmp_1_fu_147_p2();
    void thread_tmp_2_fu_153_p1();
    void thread_tmp_3_fu_170_p2();
    void thread_tmp_6_fu_176_p2();
    void thread_tmp_7_fu_182_p1();
    void thread_tmp_8_fu_187_p2();
    void thread_tmp_9_fu_192_p1();
    void thread_tmp_fu_141_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
