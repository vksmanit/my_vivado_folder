// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multiplication.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multiplication::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multiplication::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> multiplication::ap_ST_st1_fsm_0 = "1";
const sc_lv<7> multiplication::ap_ST_st2_fsm_1 = "10";
const sc_lv<7> multiplication::ap_ST_st3_fsm_2 = "100";
const sc_lv<7> multiplication::ap_ST_st4_fsm_3 = "1000";
const sc_lv<7> multiplication::ap_ST_st5_fsm_4 = "10000";
const sc_lv<7> multiplication::ap_ST_st6_fsm_5 = "100000";
const sc_lv<7> multiplication::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<32> multiplication::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> multiplication::ap_const_lv1_1 = "1";
const sc_lv<32> multiplication::ap_const_lv32_5 = "101";
const sc_lv<32> multiplication::ap_const_lv32_1F = "11111";
const sc_lv<32> multiplication::ap_const_lv32_3F = "111111";
const sc_lv<33> multiplication::ap_const_lv33_0 = "000000000000000000000000000000000";
const sc_lv<64> multiplication::ap_const_lv64_FFFFFFFF80000000 = "1111111111111111111111111111111110000000000000000000000000000000";
const sc_lv<32> multiplication::ap_const_lv32_6 = "110";
const sc_lv<32> multiplication::ap_const_lv32_7FFFFFFF = "1111111111111111111111111111111";
const sc_lv<32> multiplication::ap_const_lv32_80000000 = "10000000000000000000000000000000";

multiplication::multiplication(sc_module_name name) : sc_module(name), mVcdFile(0) {
    multiplication_mul_32s_32s_64_6_U1 = new multiplication_mul_32s_32s_64_6<1,6,32,32,64>("multiplication_mul_32s_32s_64_6_U1");
    multiplication_mul_32s_32s_64_6_U1->clk(ap_clk);
    multiplication_mul_32s_32s_64_6_U1->reset(ap_rst);
    multiplication_mul_32s_32s_64_6_U1->din0(a);
    multiplication_mul_32s_32s_64_6_U1->din1(b);
    multiplication_mul_32s_32s_64_6_U1->ce(ap_var_for_const0);
    multiplication_mul_32s_32s_64_6_U1->dout(grp_fu_48_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_2_fu_85_p2 );
    sensitive << ( phitmp_fu_78_p3 );
    sensitive << ( tmp_5_fu_75_p1 );

    SC_METHOD(thread_ap_sig_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_73);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_46 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_73 );

    SC_METHOD(thread_icmp_fu_64_p2);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_3_fu_54_p4 );

    SC_METHOD(thread_phitmp_fu_78_p3);
    sensitive << ( icmp_reg_114 );

    SC_METHOD(thread_tmp_2_fu_85_p2);
    sensitive << ( icmp_reg_114 );
    sensitive << ( tmp_4_fu_70_p2 );

    SC_METHOD(thread_tmp_3_fu_54_p4);
    sensitive << ( grp_fu_48_p2 );

    SC_METHOD(thread_tmp_4_fu_70_p2);
    sensitive << ( i0_reg_108 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_tmp_5_fu_75_p1);
    sensitive << ( i0_reg_108 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multiplication_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_22, "ap_sig_22");
    sc_trace(mVcdFile, grp_fu_48_p2, "grp_fu_48_p2");
    sc_trace(mVcdFile, i0_reg_108, "i0_reg_108");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_46, "ap_sig_46");
    sc_trace(mVcdFile, icmp_fu_64_p2, "icmp_fu_64_p2");
    sc_trace(mVcdFile, icmp_reg_114, "icmp_reg_114");
    sc_trace(mVcdFile, tmp_3_fu_54_p4, "tmp_3_fu_54_p4");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_73, "ap_sig_73");
    sc_trace(mVcdFile, tmp_4_fu_70_p2, "tmp_4_fu_70_p2");
    sc_trace(mVcdFile, tmp_2_fu_85_p2, "tmp_2_fu_85_p2");
    sc_trace(mVcdFile, phitmp_fu_78_p3, "phitmp_fu_78_p3");
    sc_trace(mVcdFile, tmp_5_fu_75_p1, "tmp_5_fu_75_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("multiplication.hdltvin.dat");
    mHdltvoutHandle.open("multiplication.hdltvout.dat");
}

multiplication::~multiplication() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete multiplication_mul_32s_32s_64_6_U1;
}

void multiplication::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void multiplication::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        i0_reg_108 = grp_fu_48_p2.read();
        icmp_reg_114 = icmp_fu_64_p2.read();
    }
}

void multiplication::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void multiplication::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void multiplication::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void multiplication::thread_ap_return() {
    ap_return = (!tmp_2_fu_85_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_85_p2.read()[0].to_bool())? phitmp_fu_78_p3.read(): tmp_5_fu_75_p1.read());
}

void multiplication::thread_ap_sig_22() {
    ap_sig_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void multiplication::thread_ap_sig_46() {
    ap_sig_46 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void multiplication::thread_ap_sig_73() {
    ap_sig_73 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void multiplication::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void multiplication::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_46.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void multiplication::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_73.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void multiplication::thread_icmp_fu_64_p2() {
    icmp_fu_64_p2 = (!tmp_3_fu_54_p4.read().is_01() || !ap_const_lv33_0.is_01())? sc_lv<1>(): (sc_bigint<33>(tmp_3_fu_54_p4.read()) > sc_bigint<33>(ap_const_lv33_0));
}

void multiplication::thread_phitmp_fu_78_p3() {
    phitmp_fu_78_p3 = (!icmp_reg_114.read()[0].is_01())? sc_lv<32>(): ((icmp_reg_114.read()[0].to_bool())? ap_const_lv32_7FFFFFFF: ap_const_lv32_80000000);
}

void multiplication::thread_tmp_2_fu_85_p2() {
    tmp_2_fu_85_p2 = (icmp_reg_114.read() | tmp_4_fu_70_p2.read());
}

void multiplication::thread_tmp_3_fu_54_p4() {
    tmp_3_fu_54_p4 = grp_fu_48_p2.read().range(63, 31);
}

void multiplication::thread_tmp_4_fu_70_p2() {
    tmp_4_fu_70_p2 = (!i0_reg_108.read().is_01() || !ap_const_lv64_FFFFFFFF80000000.is_01())? sc_lv<1>(): (sc_bigint<64>(i0_reg_108.read()) < sc_bigint<64>(ap_const_lv64_FFFFFFFF80000000));
}

void multiplication::thread_tmp_5_fu_75_p1() {
    tmp_5_fu_75_p1 = i0_reg_108.read().range(32-1, 0);
}

void multiplication::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void multiplication::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

