// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _multiplication_HH_
#define _multiplication_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "multiplication_mul_32s_32s_64_6.h"

namespace ap_rtl {

struct multiplication : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > a;
    sc_in< sc_lv<32> > b;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    multiplication(sc_module_name name);
    SC_HAS_PROCESS(multiplication);

    ~multiplication();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    multiplication_mul_32s_32s_64_6<1,6,32,32,64>* multiplication_mul_32s_32s_64_6_U1;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_22;
    sc_signal< sc_lv<64> > grp_fu_48_p2;
    sc_signal< sc_lv<64> > i0_reg_108;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_46;
    sc_signal< sc_lv<1> > icmp_fu_64_p2;
    sc_signal< sc_lv<1> > icmp_reg_114;
    sc_signal< sc_lv<33> > tmp_3_fu_54_p4;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_73;
    sc_signal< sc_lv<1> > tmp_4_fu_70_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_85_p2;
    sc_signal< sc_lv<32> > phitmp_fu_78_p3;
    sc_signal< sc_lv<32> > tmp_5_fu_75_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_st1_fsm_0;
    static const sc_lv<7> ap_ST_st2_fsm_1;
    static const sc_lv<7> ap_ST_st3_fsm_2;
    static const sc_lv<7> ap_ST_st4_fsm_3;
    static const sc_lv<7> ap_ST_st5_fsm_4;
    static const sc_lv<7> ap_ST_st6_fsm_5;
    static const sc_lv<7> ap_ST_st7_fsm_6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<33> ap_const_lv33_0;
    static const sc_lv<64> ap_const_lv64_FFFFFFFF80000000;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7FFFFFFF;
    static const sc_lv<32> ap_const_lv32_80000000;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_22();
    void thread_ap_sig_46();
    void thread_ap_sig_73();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_icmp_fu_64_p2();
    void thread_phitmp_fu_78_p3();
    void thread_tmp_2_fu_85_p2();
    void thread_tmp_3_fu_54_p4();
    void thread_tmp_4_fu_70_p2();
    void thread_tmp_5_fu_75_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
